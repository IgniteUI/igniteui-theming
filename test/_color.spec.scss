@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use '../node_modules/sass-true/' as *;
@use '../sass/color' as *;

// base colors
$_primary: #09f;
$_secondary: #97c;
$_gray: #000;

// palette mockup
$_palette: (
    primary: (
        500: $_primary,
        '500-contrast': #000
    ),
    secondary: (
        500: $_secondary,
        '500-contrast': #000
    ),
    gray: (
        500: $_gray,
        '500-contrast': #fff
    ),
    _meta: (
        'primary': $_primary,
        'secondary': $_secondary,
        'gray': $_gray,
        'variant': 'material'
    )
);

@include describe('Color operations') {
    @include describe('base') {
        @include it('should calculate the contrast ratio between two colors') {
            @include assert-equal(math.div(math.round(contrast($_primary, $_secondary) * 100), 100), 1.19);
        }

        @include it('should mix two colors to produce an opaque color') {
            @include assert-equal(to-opaque(rgba(255, 255, 255, .32), #fff), #fff);
            @include assert-equal(to-opaque(rgba(233, 233, 233, .32), rgba(255, 255, 255, 0)), #f7f7f7);
        }

        @include it('converts a color to a list of HSL values') {
            @include assert-equal(to-hsl(#000), (0deg, 0%, 0%));
        }
    }

    @include describe('contrast') {
        @include it('should return the passed background value if no valid colors are provided') {
            $value: 'not a color';

            @include assert-equal(text-contrast($value), $value);
        }

        @include it('should return black for a white background') {
            $background: #fff;

            @include assert-equal(text-contrast($background), #000);
        }

        @include it('should return white for a black background') {
            $background: #000;

            @include assert-equal(text-contrast($background), #fff);
        }

        @include it('should return a contrasting color for a given background regardless of level case') {
            $test-color: #000;

            @include assert-equal(text-contrast($_primary, $test-color, 'AAA'), $test-color);
            @include assert-equal(text-contrast($_primary, $test-color, 'aaa'), $test-color);
            @include assert-equal(text-contrast($_primary, $test-color, 'Aaa'), $test-color);
        }

        @include it('returns the best contrast color from a list of candidates') {
            @include assert-equal(text-contrast($_primary, #fff #222 #333, 'AA'), #222);
        }

        @include it('should return an AAA contrasting color for a given background') {
            $test-color: #000;

            @include assert-equal(text-contrast($_primary, $test-color, 'AAA'), $test-color);
        }

        @include it('should return an AA contrasting color for a given background') {
            $test-color: #222;

            @include assert-equal(text-contrast($_primary, $test-color, 'AA'), $test-color);
        }
    }

    @include describe('palette') {
        @include it('should return a shade of type color w/ palette as only argument') {
            $value: color($_palette);

            @include assert-equal(type-of($value), color);
        }

        @include it('should return a shade of type color w/ palette and color as only arguments') {
            $value: color($_palette, secondary);

            @include assert-equal($value, $_secondary);
        }

        @include it('should return a shade of type color w/ all arguments passed') {
            $value: color($_palette, secondary, 500);

            @include assert-equal($value, $_secondary);
        }

        @include it('should return a shade as CSS variable w/o arguments') {
            $value: color();

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--ig-primary-500), var(--ig-primary-a)));
        }

        @include it('should return a shade as CSS variable w/ color as only argument') {
            $value: color($color: secondary);

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--ig-secondary-500), var(--ig-secondary-a)));
        }

        @include it('should return a shade of type string as CSS var w/ color and variant as only arguments') {
            $value: color($color: secondary, $variant: 'A400');

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--ig-secondary-A400), var(--ig-secondary-a)));
        }

        @include it('should return a contrast shade of type color w/ palette as only argument') {
            $value: contrast-color($_palette);

            @include assert-equal(type-of($value), color);
            @include assert-equal(text-contrast(color($_palette, primary), $value), $value);
        }

        @include it('should return a contrast shade of type string as CSS var w/ color and variant as only arguments') {
            $value: contrast-color($color: secondary, $variant: 'A400');

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsla(var(--ig-secondary-A400-contrast), var(--ig-secondary-a)));
        }

        /* stylelint-disable custom-property-no-missing-var-function */
        @include it('should generate CSS variables for all colors in a palette') {
            @include assert() {
                @include output() {
                    @include palette($_palette);
                }

                @include contains() {
                    --ig-primary-h: #{math.round(color.hue($_primary))};
                    --ig-primary-s: #{math.round(color.saturation($_primary))};
                    --ig-primary-l: #{math.round(color.lightness($_primary))};
                    --ig-primary-a: #{math.round(color.alpha($_primary))};
                    --ig-secondary-h: #{math.round(color.hue($_secondary))};
                    --ig-secondary-s: #{math.round(color.saturation($_secondary))};
                    --ig-secondary-l: #{math.round(color.lightness($_secondary))};
                    --ig-secondary-a: #{math.round(color.alpha($_secondary))};
                    --ig-gray-h: #{math.round(color.hue($_gray))};
                    --ig-gray-s: #{math.round(color.saturation($_gray))};
                    --ig-gray-l: #{math.round(color.lightness($_gray))};
                    --ig-gray-a: #{math.round(color.alpha($_gray))};
                    --ig-primary-500: #{var(--ig-primary-h), var(--ig-primary-s), var(--ig-primary-l)};
                    --ig-primary-500-contrast: #{contrast-color($_palette, primary, 500)};
                    --ig-secondary-500: #{var(--ig-secondary-h), var(--ig-secondary-s), var(--ig-secondary-l)};
                    --ig-secondary-500-contrast: #{contrast-color($_palette, secondary, 500)};
                    --ig-gray-500: #{var(--ig-gray-h), var(--ig-gray-s), var(--ig-gray-l)};
                    --ig-gray-500-contrast: #{contrast-color($_palette, gray, 500)};
                }
            }
        }
    }
}
