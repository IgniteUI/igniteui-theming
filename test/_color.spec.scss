/* stylelint-disable custom-property-no-missing-var-function */
/* stylelint-disable max-nesting-depth */
@use 'sass:map';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';
@use 'sass:color';
@use '../node_modules/sass-true/' as *;
@use '../sass/color' as *;
@use './styles/mocks';

// base colors
$_primary: #09f;
$_secondary: #97c;
$_surface: #fff;
$_success: green;
$_info: blue;
$_warn: orange;
$_error: red;
$_palette: palette(
    $primary: $_primary,
    $secondary: $_secondary,
    $surface: $_surface,
    $success: $_success,
    $info: $_info,
    $warn: $_warn,
    $error: $_error,
    $variant: 'material'
);

@include describe('Color') {
    @include describe('base') {
        @include it('should calculate the contrast ratio between two colors') {
            @include assert-equal(contrast($_primary, $_secondary), 1.19);
        }

        @include it('should mix two colors to produce an opaque color') {
            @include assert-equal(to-opaque(rgba(255, 255, 255, .32), #fff), #fff);
            @include assert-equal(to-opaque(rgba(233, 233, 233, .32), rgba(255, 255, 255, 0)), #f7f7f7);
        }

        @include it('converts a color to a list of HSL values') {
            @include assert-equal(to-hsl(#000), (0deg, 0%, 0%));
        }
    }

    @include describe('charts') {
        @include it('should resolve regular chart brushes') {
            @include configure-colors($enhanced-accessibility: false);
            @include assert-equal(chart-brushes(), $brushes-regular);
        }

        @include it('should resolve color-blind chart brushes') {
            @include configure-colors($enhanced-accessibility: true);
            @include assert-equal(chart-brushes(), $brushes-color-blind);
        }
    }

    @include describe('contrast') {
        @include it('should return the passed background value if no valid colors are provided') {
            $value: 'not a color';

            @include assert-equal(text-contrast($value), $value);
        }

        @include it('should return black for a white background') {
            $background: #fff;

            @include assert-equal(text-contrast($background), #000);
        }

        @include it('should return white for a black background') {
            $background: #000;

            @include assert-equal(text-contrast($background), #fff);
        }

        @include it('should return a contrasting color for a given background regardless of level case') {
            $test-color: #000;

            @include assert-equal(text-contrast($_primary, $test-color, 'AAA'), $test-color);
            @include assert-equal(text-contrast($_primary, $test-color, 'aaa'), $test-color);
            @include assert-equal(text-contrast($_primary, $test-color, 'Aaa'), $test-color);
        }

        @include it('returns the best contrast color from a list of candidates') {
            @include assert-equal(text-contrast($_primary, #fff #222 #333, 'AA'), #222);
        }

        @include it('should return an AAA contrasting color for a given background') {
            $test-color: #000;

            @include assert-equal(text-contrast($_primary, $test-color, 'AAA'), $test-color);
        }

        @include it('should return an AA contrasting color for a given background') {
            $test-color: #222;

            @include assert-equal(text-contrast($_primary, $test-color, 'AA'), $test-color);
        }
    }

    @include describe('palette') {
        @include it('should return a shade of type color w/ palette as only argument') {
            $value: color($_palette);

            @include assert-equal(type-of($value), color);
        }

        @include it('should return a shade of type color string w/ palette and color as only arguments') {
            $value: color($_palette, secondary);

            @include assert-equal($value, $_secondary);
        }

        @include it('should return a shade of type string w/ all arguments passed') {
            $value-500: color($_palette, secondary, 500);
            $value-800: color($_palette, secondary, 800);

            @include assert-equal($value-500, $_secondary);
            @include assert-unequal($value-500, $value-800);
        }

        @include it('should return a shade as CSS variable w/o arguments') {
            $value: color();

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsl(from (var(--ig-primary-500)) h s l / 1));
        }

        @include it('should return a shade as CSS variable w/ color as only argument') {
            $value: color($color: secondary);

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsl(from (var(--ig-secondary-500)) h s l / 1));
        }

        @include it('should return a shade of type string as CSS var w/ color and variant as only arguments') {
            $value: color($color: secondary, $variant: 'A400');

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, hsl(from (var(--ig-secondary-A400)) h s l / 1));
        }

        @include it('should return a contrast shade of type string w/ palette as only argument') {
            $value: contrast-color($_palette, $opacity: .5);
            $expected: color-mix(in oklch, var(--ig-primary-500-contrast) 50%, transparent);

            @include assert-equal($expected, $value);
        }

        @include it('should return a contrast shade of type string as CSS var w/ color and variant as only arguments') {
            $value: contrast-color($color: secondary, $variant: 'A400', $opacity: .25);

            @include assert-equal(type-of($value), string);
            @include assert-equal($value, color-mix(in oklch, var(--ig-secondary-A400-contrast) 25%, transparent));
        }

        @include it('should generate an HSL color shade from a given base color') {
            $color: primary;
            $variant: 600;
            $shade: shade($color, $_primary, $variant, null);
            $expected: (
                raw: hsl(204deg 100% 44.5%),
                hsl: #{hsl(from var(--ig-primary-500) h calc(s * 1.26) calc(l * 0.89))}
            );

            @include assert-equal($shade, $expected);
        }

        @include it('should generate an a contrasting HSL grayscale shade for a given surface color') {
            $color: gray;
            $variant: 50;
            $surface: #eee;
            $shade: shade($color, null, $variant, $surface);
            $expected: (
                raw: hsl(0deg 0% 98%),
                hsl: #{hsl(from var(--ig-gray-500) h s 98%)}
            );

            // $surface is bright, return a darker shade of gray
            @include assert-equal($shade, $expected);

            $surface: #444;
            $shade: shade($color, null, $variant, $surface);
            $expected: #{var(--ig-#{$color}-h), var(--ig-#{$color}-s), 13%};
            $expected: (
                raw: hsl(0deg 0% 13%),
                hsl: #{hsl(from var(--ig-gray-500) h s 13%)}
            );

            // $surface is dark, return a lighter shade of gray
            @include assert-equal($shade, $expected);
        }

        @include it('should generate a valid palette') {
            @each $color, $shades in $IPalette {
                @include assert-true(map.get($_palette, $color));
                @include assert-true(meta.type-of(map.get($_palette, $color)), 'map');

                @each $shade, $value in $shades {
                    // Test if each shade exists and is a color
                    @include assert-true(map.get($_palette, $color, $shade));
                    @include assert-true(meta.type-of(map.get($_palette, $color, $shade)), 'color');

                    @if $shade != variant {
                        // Test if each contrast shade exits and is a color
                        @include assert-true(map.get($_palette, $color, #{$shade}-contrast));
                        @include assert-true(meta.type-of(map.get($_palette, $color, #{$shade}-contrast)), 'color');
                    }

                    @if $shade == variant {
                        @include assert-true(meta.type-of(map.get($_palette, $shade)), 'string');
                    }
                }
            }
        }

        @include it('should generate correct CSS variables for color and grayscale shades in a palette') {
            @include assert() {
                @include output($selector: false) {
                    @include palette($_palette);
                }

                @include contains($selector: false) {
                    :root {
                        @each $color, $shades in map.remove($IPalette, '_meta') {
                          @each $shade in $shades {
                            $value: map.get($_palette, $color, $shade);

                            --ig-#{$color}-#{$shade}: #{$value};
                          }
                        }
                    }
                }
            }
        }

        @include it('verify the integrity of sample handmade palette') {
            $_palette: mocks.$handmade-palette;

            @each $color, $shades in map.remove($IPalette, '_meta') {
                @include assert-true(map.get($_palette, $color));
                @include assert-true(meta.type-of(map.get($_palette, $color)), 'map');

                @each $shade, $value in $shades {
                    // Test if each shade exists
                    @include assert-true(map.get($_palette, $color, $shade));

                    @if $shade != variant{
                        // Test if each contrast shade exits
                        @include assert-true(map.get($_palette, $color, #{$shade}-contrast));

                        // Test if each hsl list shade exits and is a list
                        @include assert-true(meta.type-of(map.get($_palette, $color, $shade)), 'list');
                    }

                    @if $shade == variant {
                        @include assert-true(meta.type-of(map.get($_palette, $shade)), 'string');
                    }
                }
            }
        }

        @include it('should generate CSS variables for handmande palettes') {
            $_palette: mocks.$handmade-palette;

            @include assert() {
                @include output($selector: false) {
                    @include palette($_palette);
                }

                @include contains($selector: false) {
                    :root {
                        @each $color, $shades in map.remove($IPalette, '_meta') {
                          @each $shade in $shades {
                            $value: map.get($_palette, $color, $shade);

                            --ig-#{$color}-#{$shade}: #{$value};
                          }
                        }
                    }
                }
            }
        }

        @include it('should properly get the value from handmade palettes') {
            $_palette: mocks.$handmade-palette;
            $_ref: color(null, primary, 800);

            @include assert-equal($_ref, hsl(from var(--ig-primary-800) h s l / 1));
        }

        @include it('should convert a color to a list of HSL values') {
            @include assert-equal(to-hsl(black), (0deg, 0%, 0%));
        }
    }
}
