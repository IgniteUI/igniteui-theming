// stylelint-disable selector-class-pattern
// stylelint-disable max-nesting-depth
@use '../node_modules/sass-true/' as *;
@use '../sass/bem' as *;

@include describe('BEM') {
    @include it('creates block__element classes') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    background: black;

                    @include e(element) {
                        color: orange;
                    }
                }
            }

            @include expect($selector: false) {
                .block {
                    background: black;
                }

                .block__element {
                    color: orange;
                }
            }
        }
    }

    @include it('creates block--modifier classes using the modifier mixins') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    background: black;

                    @include m(error) {
                        background: red;
                    }

                    @include mx(error, selected) {
                        background: darkred;
                    }
                }
            }

            @include expect($selector: false) {
                .block {
                    background: black;
                }

                .block--error {
                    background: red;
                }

                .block--error.block--selected {
                    background: darkred;
                }
            }
        }
    }

    @include it('creates block__element--modifier classes using the element mixin') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    background: black;

                    @include e(element, $m: small) {
                        font-size: 12px;
                    }

                    @include e(element, $m: medium) {
                        font-size: 14px;
                    }

                    @include e(element, $m: large) {
                        font-size: 16px;
                    }
                }
            }

            @include expect($selector: false) {
                .block {
                    background: black;
                }

                .block__element--small {
                    font-size: 12px;
                }

                .block__element--medium {
                    font-size: 14px;
                }

                .block__element--large {
                    font-size: 16px;
                }
            }
        }
    }

    @include it('creates negating block__element--modifier classes') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    @include e(element, $m: small, $not: circle) {
                        background: blue;
                    }
                }
            }

            @include expect($selector: false) {
                .block__element--small:not(.block__element--circle) {
                    background: blue;
                }
            }
        }
    }

    @include it('creates multiple element modifier classes using the element mixin') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    background: black;

                    @include e(element, $mods: (small, pink)) {
                        color: pink;
                        font-size: 12px;
                    }
                }
            }

            @include expect($selector: false) {
                .block {
                    background: black;
                }

                .block__element--small.block__element--pink {
                    color: pink;
                    font-size: 12px;
                }
            }
        }
    }

    @include it('creates multiple negating element modifier classes') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    @include e(element, $mods: (small, pink), $not: (circle, large)) {
                        color: pink;
                        font-size: 12px;
                    }
                }
            }

            @include expect($selector: false) {
                .block__element--small.block__element--pink:not(.block__element--circle, .block__element--large) {
                    color: pink;
                    font-size: 12px;
                }
            }
        }
    }

    @include it('overwrites element styles in a modified block') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    background: black;

                    @include e(element) {
                        color: wheat;
                    }

                    @include m(error) {
                        background: red;

                        @include e(element) {
                            color: white;
                        }
                    }
                }
            }

            @include expect($selector: false) {
                .block {
                    background: black;
                }

                .block__element {
                    color: wheat;
                }

                .block--error {
                    background: red;
                }

                .block--error .block__element {
                    color: white;
                }
            }
        }
    }

    @include it('creates negating modifier classes using the mod and mods mixins') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    @include m(checked, $not: (disabled, indeterminate)) {
                        background: pink;
                    }

                    @include m(disabled, $not: checked) {
                        background: gray;
                    }

                    @include mods(disabled, checked, ('not': 'indeterminate')) {
                        background: darkgray;
                    }

                    @include mods(disabled, checked, ('not': ('indeterminate', 'invalid'))) {
                        background: black;
                    }
                }
            }

            @include expect($selector: false) {
                .block--checked:not(.block--disabled, .block--indeterminate) {
                    background: pink;
                }

                .block--disabled:not(.block--checked) {
                    background: gray;
                }

                .block--disabled.block--checked:not(.block--indeterminate) {
                    background: darkgray;
                }

                .block--disabled.block--checked:not(.block--indeterminate, .block--invalid) {
                    background: black;
                }
            }
        }
    }

    @include it('should be able to use element classes in modifier body rules') {
        @include assert() {
            @include output($selector: false) {
                @include b(block) {
                    $this: bem--selector-to-string(&);

                    @include e(element, $mod: circle) {
                        border-radius: 50%;
                    }

                    @include m(checked) {
                        &:has(#{elem($this, element, circle)}) {
                            background: pink;
                        }
                    }
                }
            }

            @include expect($selector: false) {
                .block__element--circle {
                    border-radius: 50%;
                }

                .block--checked:has(.block__element--circle) {
                    background: pink;
                }
            }
        }
    }
}
