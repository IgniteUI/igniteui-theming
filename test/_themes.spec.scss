// stylelint-disable max-line-length
// stylelint-disable value-no-vendor-prefix
// stylelint-disable color-function-notation
// stylelint-disable max-nesting-depth
@use 'sass:list';
@use 'sass:map';
@use 'sass:meta';
@use '../node_modules/sass-true/' as *;
@use '../index' as *;

$schema: (
    type: 'light',
    background: (
        color: (primary, 400)
    ),
    hover-background: (
        color: (secondary, 700, .26)
    ),
    foreground: (
        contrast-color: (primary, 400)
    ),
    hover-foreground: contrast-color($color: secondary, $variant: 700),
    border-style: solid,
    border-radius: rem(2px),
    brushes: series,
    resting-elevation: 2,
    theme: material,
    _meta: (
        version: 1,
    ),
);

@include describe('Themes') {
    @include describe('schemas') {
        @include it('resolves util function values') {
            $instructions: (
                expand-shorthand: (4px 8px, 'padding'),
                map-keys-prefix: 'title'
            );
            $result: ((
                title-padding-top: 4px,
                title-padding-right: 8px,
                title-padding-bottom: 4px,
                title-padding-left: 8px
            ));
            $resolved: resolve-value($instructions);

            @include assert-equal($resolved, $result);

            @include assert() {
                @include output($selector: false) {
                    @include css-vars(map.merge($resolved, (name: 'data-chart', selector: 'igx-data-chart')));
                }

                @include expect($selector: false) {
                    igx-data-chart {
                        --title-padding-top: var(--data-chart-title-padding-top, 4px);
                        --title-padding-right: var(--data-chart-title-padding-right, 8px);
                        --title-padding-bottom: var(--data-chart-title-padding-bottom, 4px);
                        --title-padding-left: var(--data-chart-title-padding-left, 8px);
                    }
                }
            }
        }

        @include it('should resolve values from function instructions') {
            $instructions: (
                (color: primary),
                (contrast-color: (primary, '400')),
            );
            $results: (
                color($color: primary),
                contrast-color($color: primary, $variant: '400'),
            );

            @for $i from 1 through list.length($instructions) {
                $instruction: list.nth($instructions, $i);
                $result: list.nth($results, $i);

                @include assert-equal(resolve-value($instruction), $result);
            }
        }

        @include it('should work with custom(handmade) palettes') {
            $instructions: (
                (color: tertiary),
                (contrast-color: (tertiary, '400')),
            );
            $results: (
                color($color: tertiary),
                contrast-color($color: tertiary, $variant: '400'),
            );

            @for $i from 1 through list.length($instructions) {
                $instruction: list.nth($instructions, $i);
                $result: list.nth($results, $i);

                @include assert-equal(resolve-value($instruction), $result);
            }
        }

        @include it('should output theme maps from schema definitions') {
            $theme: (
                type: 'light',
                background: hsl(from var(--ig-primary-400) h s l / 1),
                hover-background: hsl(from var(--ig-secondary-700) h s l / .26),
                foreground: color-mix(in oklch, var(--ig-primary-400-contrast) 100%, transparent),
                hover-foreground: color-mix(in oklch, var(--ig-secondary-700-contrast) 100%, transparent),
                border-style: solid,
                border-radius: .125rem,
                brushes: var(--chart-brushes),
                resting-elevation: var(--ig-elevation-2),
                theme: material,
                _meta: (
                    version: 1
                )
            );

            @include assert-equal(digest-schema($schema), $theme);
        }

        @include it('should resolve the border-radius function from schema definitions') {
            $schema: (
                variant: 'material',
                border-radius: (
                  border-radius: (
                    12px,
                    16px,
                    20px
                  )
                ),
                type: 'light',
            );

            @include assert-equal(
                map.get(digest-schema($schema), 'border-radius'),
                border-radius(12px, 16px, 20px)
            );
        }

        @include it('should retrieve a reference to the CSS variable for a given theme') {
            $theme: map.merge(digest-schema($schema), (name: 'igc-avatar'));

            @include assert-equal(var-get($theme, 'background', inherit), var(--background, inherit));
        }

        @include it('should convert component theme props into CSS variables') {
            $name: 'igc-avatar';
            $theme: digest-schema($schema);

            @include assert() {
                @include output() {
                    @include css-vars-from-theme($theme, $name);
                }

                @include expect() {
                    @each $key, $value in map.remove($theme, $ignored-keys...) {
                        --#{$key}: var(--#{$name}-#{$key}, #{$value});
                    }

                    --ig-theme: material;
                }
            }
        }

        @include it('should convert component theme props into CSS variables with a prefix') {
            $name: 'igc-dockmanager';
            $prefix: 'igc';
            $theme: extend(
                map.remove(digest-schema($schema), $ignored-keys...),
                (
                    'prefix': $prefix
                )
            );

            @include assert() {
                @include output() {
                    @include css-vars-from-theme($theme, $name);
                }

                @include expect() {
                    @each $key, $value in map.remove($theme, 'prefix') {
                        --#{$prefix}-#{$key}: var(--#{$name}-#{$key}, #{$value});
                    }
                }
            }
        }

        @include it('should ignore all keys in the ignore list') {
            $name: 'igc-avatar';
            $theme: digest-schema($schema);

            @each $key in $ignored-keys {
                $theme: map.merge($theme, (#{$key}: 'test'));
            }

            @include assert() {
                @include output() {
                    @include css-vars-from-theme($theme, $name);
                }

                @include expect() {
                    @each $key, $value in map.remove($theme, $ignored-keys...) {
                        --#{$key}: var(--#{$name}-#{$key}, #{$value});
                    }

                    --ig-theme: test;
                }
            }
        }

        @include it('should scope theme CSS variables correctly') {
            $name: 'igc-avatar';
            $theme: map.merge(digest-schema($schema), (name: $name));

            // Calling from the root of the stylesheet
            @include assert() {
                @include output($selector: false) {
                    @include css-vars($theme);
                }

                @include expect($selector: false) {
                    #{$name} {
                        @each $key, $value in map.remove($theme, $ignored-keys...) {
                            --#{$key}: var(--#{$name}-#{$key}, #{$value});
                        }

                        --ig-theme: material;
                    }
                }
            }

            // Calling from within another selector
            @include assert() {
                @include output($selector: false) {
                    .my-theme {
                        @include css-vars($theme);
                    }
                }

                @include expect($selector: false) {
                    .my-theme,
                    .my-theme #{$name} {
                        @each $key, $value in map.remove($theme, $ignored-keys...) {
                            --#{$key}: var(--#{$name}-#{$key}, #{$value});
                        }

                        --ig-theme: material;
                    }
                }
            }
        }

        @include it('should scope theme CSS variables to a specified scope') {
            $name: 'igc-avatar';
            $theme: map.merge(digest-schema($schema), (name: $name));

            // Calling from the root of the stylesheet w/ custom selector provided
            @include assert() {
                @include output($selector: false) {
                    @include css-vars($theme, '.custom-selector');
                }

                @include expect($selector: false) {
                    .custom-selector {
                        @each $key, $value in map.remove($theme, $ignored-keys...) {
                            --#{$key}: var(--#{$name}-#{$key}, #{$value});
                        }

                        --ig-theme: material;
                    }
                }
            }

            // Calling from within another selector w/ custom selector provided
            @include assert() {
                @include output($selector: false) {
                    .my-theme {
                        @include css-vars($theme, '.custom-selector');
                    }
                }

                @include expect($selector: false) {
                    .my-theme,
                    .my-theme .custom-selector {
                        @each $key, $value in map.remove($theme, $ignored-keys...) {
                            --#{$key}: var(--#{$name}-#{$key}, #{$value});
                        }

                        --ig-theme: material;
                    }
                }
            }
        }

        @include it('should set the border-radius to a value between min and max') {
            $border-radius: border-radius(rem(4px), rem(2px), rem(4px));
            $expected: clamp(.125rem, meta.inspect(calc(var(--ig-radius-factor, 1) * .25rem)), .25rem);

            @include assert-equal($assert: $border-radius, $expected: $expected, $inspect: true);
        }

        @include it('should include border-radius styles to a given scope with a value between min and max') {
            $expected: clamp(.125rem, meta.inspect(calc(var(--ig-radius-factor, 1) * .25rem)), .25rem);

            @include assert() {
                @include output() {
                    @include border-radius(rem(4px), rem(2px), rem(4px));
                }

                @include expect() {
                    border-radius: $expected;
                }
            }
        }

        @include it('include single-line truncate styles when the ellipsis mixin is included') {
            @include assert() {
                @include output() {
                    @include ellipsis();
                }

                @include expect() {
                    white-space: nowrap;
                    text-overflow: ellipsis;
                    overflow: hidden;
                }
            }
        }

        @include it('includes multi-line truncate styles when the line-clamp mixin is included') {
            @include assert() {
                @include output() {
                    @include line-clamp(3, true, true);
                }

                @include expect() {
                    display: -webkit-inline-box;
                    -webkit-line-clamp: 3;
                    -webkit-box-orient: vertical;
                    overflow: hidden;
                }
            }
        }

        @include it('includes styles that hide the default element when the hide-default mixin is included') {
            @include assert() {
                @include output() {
                    @include hide-default();
                }

                @include expect() {
                    position: absolute;
                    width: 1px;
                    height: 1px;
                    margin: -1px;
                    border: none;
                    clip: rect(0, 0, 0, 0);
                    outline: 0;
                    pointer-events: none;
                    overflow: hidden;
                    appearance: none;
                }
            }
        }

        @include describe('Sizing') {
            @include it('should produce size variables') {
                $sm: 100px;
                $md: 200px;
                $lg: 300px;

                @include assert() {
                    @include output() {
                        width: sizable($sm, $md, $lg);
                    }

                    @include expect() {
                        width:
                            max(
                                calc(var(--is-large, 1) * max(#{$lg}, -1 * #{$lg})),
                                calc(var(--is-medium, 1) * max(#{$md}, -1 * #{$md})),
                                calc(var(--is-small, 1) * max(#{$sm}, -1 * #{$sm}))
                            );
                    }
                }
            }
        }

        @include describe('Spacing') {
            @include it('should use customizable spacing when declaring padding/margin') {
                $value: 14px;

                @include assert() {
                    @include output() {
                        padding: pad(14px);
                    }

                    @include expect() {
                        padding:
                            max(
                                calc(
                                    var(--is-large, 1) * max(#{$value}, -1 * #{$value}) * var(--ig-spacing-large, var(--ig-spacing, --ig-spacing))
                                ),
                                calc(
                                    var(--is-medium, 1) * max(#{$value}, -1 * #{$value}) * var(--ig-spacing-medium, var(--ig-spacing, --ig-spacing))
                                ),
                                calc(
                                    var(--is-small, 1) * max(#{$value}, -1 * #{$value}) * var(--ig-spacing-small, var(--ig-spacing, --ig-spacing))
                                )
                            );
                    }
                }
            }

            @include it('should use customizable inline spacing when declaring inline padding/margin') {
                $value: 14px;

                @include assert() {
                    @include output() {
                        padding-inline: pad-inline($value);
                    }

                    @include expect() {
                        padding-inline:
                            max(
                                calc(
                                    var(--is-large, 1) * max(#{$value}, -1 * #{$value}) * var(--ig-spacing-inline-large, var(--ig-spacing-inline, --ig-spacing))
                                ),
                                calc(
                                    var(--is-medium, 1) * max(#{$value}, -1 * #{$value}) * var(--ig-spacing-inline-medium, var(--ig-spacing-inline, --ig-spacing))
                                ),
                                calc(
                                    var(--is-small, 1) * max(#{$value}, -1 * #{$value}) * var(--ig-spacing-inline-small, var(--ig-spacing-inline, --ig-spacing))
                                )
                            );
                    }
                }
            }

            @include it('should use customizable block spacing when declaring inline padding/margin') {
                $sm: 4px;
                $md: 8px;
                $lg: 16px;

                @include assert() {
                    @include output() {
                        padding-block: pad-block($sm, $md, $lg);
                    }

                    @include expect() {
                        padding-block:
                            max(
                                calc(
                                    var(--is-large, 1) * max(#{$lg}, -1 * #{$lg}) * var(--ig-spacing-block-large, var(--ig-spacing-block, --ig-spacing))
                                ),
                                calc(
                                    var(--is-medium, 1) * max(#{$md}, -1 * #{$md}) * var(--ig-spacing-block-medium, var(--ig-spacing-block, --ig-spacing))
                                ),
                                calc(
                                    var(--is-small, 1) * max(#{$sm}, -1 * #{$sm}) * var(--ig-spacing-block-small, var(--ig-spacing-block, --ig-spacing))
                                )
                            );
                    }
                }
            }
        }
    }
}
