@use 'sass:map';
@use 'sass:string';
@use '../utils/meta' as *;

/// Assigns type scale category config properties
/// as style rules wherever this mixin is included.
/// @param {Map} $scale - A type scale map reference as produces by igx-type-scale.
/// @param {String} $category - The type scale category config you want to use as CSS style rules.
/// @example scss Add the `h1` styles to custom CSS selector.
///   .fancy-h1 {
///      @include type-style($default-type-scale, 'h1');
///      font-family: 'GT Walsheim';
///      color: mediumvioletred;
///   }
@mixin type-style($scale, $category) {
    $type-category: map.get($scale, $category);

    @each $key, $value in $type-category {
        #{$key}: #{$value};
    }
    @content;
}

/// Transforms a type style map into css font variables.
/// @param {String} $name - The custom CSS variable name.
/// @param {Map} $type-style - A type style map reference as produces by ig-type-style.
/// @param {String} $prefix [null] - Optional prefix.
/// @example scss Assign the `h1` styles to custom CSS property using the CSS font shorthand syntax.
///   $h1-style: type-scale-category($type-scale, 'h1');
///   @include type-style-vars($h1-style);
@mixin type-style-vars($name, $type-style) {
    @each $key, $value in $type-style {
        --ig-#{$name}-#{$key}: #{$value};
    }
}

@mixin typography($font-family, $type-scale) {
    $scope: if(is-root(), ':root', '&');

    #{$scope} {
        --ig-font-family: #{string.unquote($font-family)};

        @each $name, $style in map.remove($type-scale, '_meta') {
            @include type-style-vars($name, $style);
        }
    }
}
