@use 'sass:map';
@use '../../functions' as *;
@use '../../schemas/' as *;
@use '../../../utils/map' as *;
@use '../../../color/functions' as *;
@use '../../../elevations/' as *;

////
/// @group themes
/// @access public
/// @author <a href="https://github.com/simeonoff" target="_blank">Simeon Simeonoff</a>
/// @author <a href="https://github.com/desig9stein" target="_blank">Marin Popov</a>
////

/// Checkbox Theme
/// @param {Map} $schema [$light-material-schema] - The schema used as basis for styling the component.
/// @param {Color} $label-color [null]- The text color used for the label text.
/// @param {Color} $label-color-hover [null]- The text color used for the label text on hover.
/// @param {Color} $empty-color [null] - The unchecked border color.
/// @param {Color} $empty-color-hover [null] - The unchecked border color on hover.
/// @param {Color} $empty-fill-color [null] - The unchecked fill color.
/// @param {Color} $fill-color [null] - The checked border and fill colors.
/// @param {Color} $fill-color-hover [null] - The checked border and fill colors on hover.
/// @param {Color} $tick-color [null] - The checked mark color.
/// @param {Color} $tick-color-hover [null] - The checked mark color on hover.
/// @param {Color} $disabled-color [null] - The disabled border and fill colors.
/// @param {Color} $disabled-tick-color [null] - The checked mark color in disabled state.
/// @param {Color} $disabled-indeterminate-color [null] - The disabled border and fill colors in indeterminate state.
/// @param {Color} $disabled-color-label [null] - The disabled label color.
/// @param {List} $border-radius [null] - The border radius used for checkbox component.
/// @param {List} $border-radius-ripple [null] - The border radius used for checkbox ripple.
/// @param {Color} $focus-outline-color [null] - The focus outlined color.
/// @param {Color} $focus-outline-color-focused [null] - The focus outlined color for focused state.
/// @param {Color} $focus-border-color [null] - The focus border color.
/// @param {Color} $error-color [null] - The border and fill colors in invalid state.
/// @param {Color} $error-color-hover [null] - The border and fill colors in invalid state on hover.
/// @param {Color} $focus-outline-color-error [null] - The focus outline error color.
/// Set to light when the surrounding area is dark.
///
/// @requires $light-material-schema
///
/// @example scss Change the checked fill color
///   $my-checkbox-theme: igx-checkbox-theme($fill-color: magenta);
///   // Pass the theme to the css-vars mixin
///   @include css-vars($my-checkbox-theme);
@function checkbox-theme(
    $schema: $light-material-schema,

    $border-radius: null,
    $label-color: null,
    $label-color-hover: null,
    $empty-color: null,
    $empty-color-hover: null,
    $empty-fill-color: null,
    $fill-color: null,
    $fill-color-hover: null,
    $tick-color: null,
    $tick-color-hover: null,
    $disabled-color: null,
    $disabled-tick-color: null,
    $disabled-indeterminate-color: null,
    $disabled-color-label: null,
    $border-radius-ripple: null,
    $focus-outline-color: null,
    $focus-outline-color-focused: null,
    $focus-border-color: null,
    $error-color: null,
    $error-color-hover: null,
    $focus-outline-color-error: null
) {
    $name: 'igx-checkbox';
    $checkbox-schema: ();

    @if map.has-key($schema, 'checkbox') {
        $checkbox-schema: map.get($schema, 'checkbox');
    } @else {
        $checkbox-schema: $schema;
    }

    $theme: digest-schema($checkbox-schema);
    $variant: map.get($theme, '_meta', 'theme');

    @if not($empty-color-hover) and $empty-color {
        $empty-color-hover: hsl(from var(--empty-color) h s calc(l * 0.9));
    }

    @if not($fill-color-hover) and $fill-color {
        $fill-color-hover: hsl(from var(--fill-color) h s calc(l * 0.9));
    }

    @if not($tick-color) and $fill-color {
        $tick-color: adaptive-contrast(var(--fill-color));
    }

    @if not($label-color-hover) and $label-color {
        $label-color-hover: hsl(from var(--label-color) h s calc(l * 0.9));
    }

    @if not($focus-border-color) and $fill-color {
        $focus-border-color: var(--fill-color);
    }

    @if not($disabled-indeterminate-color) and $fill-color {
        $disabled-indeterminate-color: hsla(from var(--fill-color) h s l / 0.5);
    }

    @if not($error-color-hover) and $error-color {
        $error-color-hover: hsl(from var(--error-color) h s calc(l * 0.9));
    }

    @if not($focus-outline-color-error) and $error-color {
        $focus-outline-color-error: hsla(from var(--error-color) h s l / 0.5);
    }

    @if $variant == 'bootstrap' {
        @if not($focus-outline-color) and $fill-color {
            $focus-outline-color: hsla(from var(--fill-color) h s l / 0.5);
        }
    }

    @if $variant == 'indigo' {
        @if not($focus-outline-color) and $empty-color {
            $focus-outline-color: hsla(from var(--empty-color) h s l / 0.5);
        }

        @if not($focus-outline-color-focused) and $fill-color {
            $focus-outline-color-focused: hsla(from var(--fill-color) h s l / 0.5);
        }
    }

    @return extend(
        $theme,
        (
            name: $name,
            label-color: $label-color,
            label-color-hover: $label-color-hover,
            empty-color: $empty-color,
            empty-color-hover: $empty-color-hover,
            empty-fill-color: $empty-fill-color,
            fill-color: $fill-color,
            fill-color-hover: $fill-color-hover,
            tick-color: $tick-color,
            tick-color-hover: $tick-color-hover,
            disabled-color: $disabled-color,
            disabled-tick-color: $disabled-tick-color,
            disabled-indeterminate-color: $disabled-indeterminate-color,
            disabled-color-label: $disabled-color-label,
            border-radius: $border-radius,
            border-radius-ripple: $border-radius-ripple,
            focus-outline-color: $focus-outline-color,
            focus-outline-color-focused: $focus-outline-color-focused,
            focus-border-color: $focus-border-color,
            error-color: $error-color,
            error-color-hover: $error-color-hover,
            focus-outline-color-error: $focus-outline-color-error,
        )
    );
}
