@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:color';
@use 'sass:string';
@use '../utils/meta' as *;

////
/// @package theming
////

// Tracks added CSS variables for color shades
$_added: () !default;

// Generates CSS variables for a shade color
// @access private
@mixin _shade($color, $shade, $value, $contrast) {
    $_shade: meta.type-of($shade) == 'string';
    $_hsl: if($_shade, string.index($shade, 'hsl'), false);
    $_contrast: if($_shade, string.index($shade, 'contrast'), false);
    $_color: '' + $color;
    $_exists: list.index($_added, #{$_color}-#{$shade});

    @if not($_hsl) {
        $_added: list.append($_added, #{$_color}-#{$shade}) !global;

        --ig-#{$_color}-#{$shade}: #{$value};
    }
}

/// Generates CSS variables for a given palette.
/// @access public
/// @group Palettes
/// @param {Map} $palette - The palette used to generate CSS variables.
/// @param {Boolean} $contrast [true] - Specify if contrast colors should be included.
/// @example scss Generate css variables for a palette
///    $palette: palette($primary: red, $secondary: blue, $gray: #000);
///    @include palette($palette);
/// @require {function} is-root
@mixin palette($palette, $contrast: true) {
    $scope: if(is-root(), ':root', '&');

    #{$scope} {
        @each $color, $shades in map.remove($palette, '_meta') {
            @each $shade, $value in $shades {
                @if not(string.index(to-string($shade), raw)) {
                    @include _shade($color, $shade, $value, $contrast);
                }
            }
        }
    }
}
