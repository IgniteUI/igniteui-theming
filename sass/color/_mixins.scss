@use 'sass:map';
@use 'sass:list';
@use 'sass:meta';
@use 'sass:math';
@use 'sass:color';
@use 'sass:string';
@use '../utils/meta' as *;

////
/// @package theming
////

// Generates CSS variables for a base color
// @access private
@mixin _base($color, $shade, $value) {
    @if $shade == 500 {
        $_type: meta.type-of($value);

        @if $_type == 'color' {
            --ig-#{$color}-h: #{math.round(color.hue($value))};
            --ig-#{$color}-s: #{math.round(color.saturation($value))};
            --ig-#{$color}-l: #{math.round(color.lightness($value))};
            --ig-#{$color}-a: #{color.alpha($value)};
        }

        // Cover handmade palettes with hsl values for base color
        @if $_type == 'list' and list.length($value) == 3 {
            --ig-#{$color}-h: #{list.nth($value, 1)};
            --ig-#{$color}-s: #{list.nth($value, 2)};
            --ig-#{$color}-l: #{list.nth($value, 3)};
            --ig-#{$color}-a: 1;
        }
    }
}

// Generates CSS variables for a shade color
// @access private
@mixin _shade($color, $shade, $value, $contrast) {
    $_shade: meta.type-of($shade) == 'string';
    $_hsl: if($_shade, string.index($shade, 'hsl'), false);
    $_contrast: if($_shade, string.index($shade, 'contrast'), false);

    @if $_hsl {
        $variant: string.slice($shade, 1, string.index($shade, '-hsl') - 1);

        --ig-#{$color}-#{$variant}: #{$value};
    }

    @if not($_hsl) and not($_contrast) {
        --ig-#{$color}-#{$shade}: #{$value};
    }

    @if $_contrast and $contrast {
        --ig-#{$color}-#{$shade}: #{$value};
    }
}

/// Generates CSS variables for a given palette.
/// @access public
/// @group Palettes
/// @param {Map} $palette - The palette used to generate CSS variables.
/// @param {Boolean} $contrast [true] - Specify if contrast colors should be included.
/// @example scss Generate css variables for a palette
///    $palette: palette($primary: red, $secondary: blue, $gray: #000);
///    @include palette($palette);
/// @require {function} is-root
@mixin palette($palette, $contrast: true) {
    $scope: if(is-root(), ':root', '&');

    #{$scope} {
        @each $color, $shades in map.remove($palette, '_meta') {
            @each $shade, $value in $shades {
                @include _base($color, $shade, $value);
                @include _shade($color, $shade, $value, $contrast);
            }
        }
    }
}
